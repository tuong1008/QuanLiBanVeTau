/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.datve;

import connectSQL.LopKetNoi;
import java.awt.Frame;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import module.TaiKhoan;
import module.TauChayTuyen;
import module.Toa;
import module.TuyenDiQuaTram;



/**
 *
 * @author Tuong
 */
public class JDialogTaoCapVeKhuHoi extends javax.swing.JDialog {

    /**
     * Creates new form JDialogTaoCapVeKhuHoi
     */
    DefaultTableModel model1;
    DefaultTableModel model2;
    LopKetNoi ketNoiCSDL;
    ArrayList<TuyenDiQuaTram[]> DSTuyen;
    ArrayList<TuyenDiQuaTram[]> DSTuyen_ChieuVe;
    ArrayList<TauChayTuyen> DSTauPhuHop;
    ArrayList<TauChayTuyen> DSTauPhuHop_ChieuVe;
    ArrayList<Toa> DSTatCaToa;
    ArrayList<Toa> DSTatCaToa_ChieuVe;
    public TaiKhoan taiKhoan;
    public JDialogTaoCapVeKhuHoi()
    {
        super((Frame) null,true);
        initComponents();
        model1=(DefaultTableModel) jTable1.getModel();
        model2=(DefaultTableModel) jTable2.getModel();
//        model1.addRow(new Object[] {"1","","","",""});
//        model1.addRow(new Object[] {"2","","","",""});
//        model1.addRow(new Object[] {"3","","","",""});
//        model1.addRow(new Object[] {"4","","","",""});
//        model1.addRow(new Object[] {"5","","","",""});
//        model2.addRow(new Object[] {"1","","","",""});
//        model2.addRow(new Object[] {"","","","",""});
    }
    public JDialogTaoCapVeKhuHoi(Vector<Vector> dataTable,ArrayList<TuyenDiQuaTram[]> DSTuyen,ArrayList<TuyenDiQuaTram[]> DSTuyen_ChieuVe,ArrayList<TauChayTuyen> DSTauPhuHop, ArrayList<TauChayTuyen> DSTauPhuHop_ChieuVe, ArrayList<Toa> DSTatCaToa, ArrayList<Toa> DSTatCaToa_ChieuVe,TaiKhoan taiKhoan, boolean modal) {
        super((Frame) null, modal);
        initComponents();
        setLocationRelativeTo(this);
        model1=(DefaultTableModel) jTable1.getModel();
        model2=(DefaultTableModel) jTable2.getModel();
        ketNoiCSDL=new LopKetNoi();
        this.DSTuyen=DSTuyen;
        this.DSTuyen_ChieuVe=DSTuyen_ChieuVe;
        this.DSTauPhuHop=DSTauPhuHop;
        this.DSTauPhuHop_ChieuVe=DSTauPhuHop_ChieuVe;
        this.DSTatCaToa=DSTatCaToa;
        this.DSTatCaToa_ChieuVe=DSTatCaToa_ChieuVe;
        this.taiKhoan=taiKhoan;
        int demChieuDi=0;
        int demChieuVe=0;
        for (int i=0;i<dataTable.size();i++)
        {
            if (dataTable.elementAt(i).elementAt(0).equals("Chiều đi"))
            {
                dataTable.elementAt(i).remove(0);
                model1.addRow(dataTable.elementAt(i));
                demChieuDi++;
            }
            else
            {
                dataTable.elementAt(i).remove(0);
                model2.addRow(dataTable.elementAt(i));
                demChieuVe++;
            }
        }
        //thêm những dòng trống
        if (demChieuDi>demChieuVe)
        {
            for (int i=1;i<=demChieuDi-demChieuVe;i++)
            {
                model2.addRow(new Object[] {"","","","",""});
            }
        }
        else
        {
            if (demChieuDi<demChieuVe)
            {
                for (int i=1;i<=demChieuVe-demChieuDi;i++)
            {
                model1.addRow(new Object[] {"","","","",""});
            }
            }
        }
        
    }    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButtonUp_ChieuDi = new javax.swing.JButton();
        jButtonDown_ChieuDi = new javax.swing.JButton();
        jButtonUp_ChieuVe = new javax.swing.JButton();
        jButtonDown_ChieuVe = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonXacNhan = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        jLabel1.setText("Sắp xếp Tuyến Khứ Hồi");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.X_AXIS));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Tàu", "Mã Toa", "Ghế Số", "Thời Gian Đi", "Thời Gian Đến"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setDragEnabled(true);
        jTable1.setDropMode(javax.swing.DropMode.INSERT_ROWS);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(163);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(163);
        }

        jPanel1.add(jScrollPane1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Tàu", "Mã Toa", "Ghế Số", "Thời Gian Đi", "Thời Gian Đến"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane3.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(163);
            jTable2.getColumnModel().getColumn(4).setResizable(false);
            jTable2.getColumnModel().getColumn(4).setPreferredWidth(163);
        }

        jPanel1.add(jScrollPane3);

        jLabel2.setText("Tạo cặp vé khứ hồi");

        jButtonUp_ChieuDi.setText("Up");
        jButtonUp_ChieuDi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUp_ChieuDiActionPerformed(evt);
            }
        });

        jButtonDown_ChieuDi.setText("Down");
        jButtonDown_ChieuDi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDown_ChieuDiActionPerformed(evt);
            }
        });

        jButtonUp_ChieuVe.setText("Up");
        jButtonUp_ChieuVe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUp_ChieuVeActionPerformed(evt);
            }
        });

        jButtonDown_ChieuVe.setText("Down");
        jButtonDown_ChieuVe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDown_ChieuVeActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("Chiều đi");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 255));
        jLabel4.setText("Chiều về");

        jButtonXacNhan.setText("Xác Nhận");
        jButtonXacNhan.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonXacNhan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonXacNhanActionPerformed(evt);
            }
        });

        jButton6.setText("Huỷ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(jButtonUp_ChieuDi, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDown_ChieuDi)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonUp_ChieuVe, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDown_ChieuVe)
                .addGap(87, 87, 87))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(139, 139, 139))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonXacNhan, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(263, 263, 263))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(298, 298, 298))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel2)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonUp_ChieuDi)
                    .addComponent(jButtonDown_ChieuDi)
                    .addComponent(jButtonUp_ChieuVe)
                    .addComponent(jButtonDown_ChieuVe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonXacNhan, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonUp_ChieuDiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUp_ChieuDiActionPerformed
        // TODO add your handling code here:
        moveRowBy_ChieuDi(-1);
        
    }//GEN-LAST:event_jButtonUp_ChieuDiActionPerformed

    private void jButtonDown_ChieuDiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDown_ChieuDiActionPerformed
        // TODO add your handling code here:
        moveRowBy_ChieuDi(1);
    }//GEN-LAST:event_jButtonDown_ChieuDiActionPerformed

    private void jButtonUp_ChieuVeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUp_ChieuVeActionPerformed
        // TODO add your handling code here:
        moveRowBy_ChieuVe(-1);
    }//GEN-LAST:event_jButtonUp_ChieuVeActionPerformed

    private void jButtonDown_ChieuVeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDown_ChieuVeActionPerformed
        // TODO add your handling code here:
        moveRowBy_ChieuVe(1);
    }//GEN-LAST:event_jButtonDown_ChieuVeActionPerformed

    private void jButtonXacNhanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonXacNhanActionPerformed
        // TODO add your handling code here:
        for (int i=0;i<model1.getRowCount();i++)
        {
            if (model1.getValueAt(i, 0).equals(""))
            {
                //Lấy dữ liệu cần thiết từ bảng Chiều về để Đặt vé
            String tempMaTau_ChieuVe=model2.getValueAt(i,0).toString();//Table---|maTau,maToa,i.getText(),thoiGianDi,thoiGianDen|
            String tempMaToa_ChieuVe=model2.getValueAt(i, 1).toString();
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd hh:mm");
            int tempChoNgoiSo_ChieuVe=Integer.valueOf(model2.getValueAt(i, 2).toString());
            Date tempThoiGianDi_ChieuVe=null;
            try {
                tempThoiGianDi_ChieuVe=formatter.parse(model2.getValueAt(i, 3).toString());
                } catch (ParseException ex) {
                    ex.printStackTrace();
                }
                Timestamp timeStampThoiGianDi_ChieuVe=new Timestamp(tempThoiGianDi_ChieuVe.getTime());
                Date tempThoiGianDen_ChieuVe=null;
                try {
                    tempThoiGianDen_ChieuVe=formatter.parse(model2.getValueAt(i, 4).toString());
                } catch (ParseException ex) {
                    ex.printStackTrace();
                }
                Timestamp timeStampThoiGianDen_ChieuVe=new Timestamp(tempThoiGianDen_ChieuVe.getTime());
                //get Tuyến theo Mã Tàu
                TauChayTuyen tempTauChayTuyen_ChieuVe=null;
                for (TauChayTuyen j:DSTauPhuHop_ChieuVe)
                {
                    if ((j.getMaTau().equals(tempMaTau_ChieuVe))&&(j.getThoiGianDenTramDi().compareTo(timeStampThoiGianDi_ChieuVe)==0))
                    {
                        tempTauChayTuyen_ChieuVe=j;
                        break;
                    }
                }
                //get Trạm đi, Trạm đến theo Mã Tuyến
                TuyenDiQuaTram[] tempTuyenDiQuaTram_ChieuVe=null;
                for (TuyenDiQuaTram[] j:DSTuyen_ChieuVe)
                {
                    if (j[0].getMaTuyen().equals(tempTauChayTuyen_ChieuVe.getMaTuyen()))
                    {
                        tempTuyenDiQuaTram_ChieuVe=j;
                        break;
                    }
                }
                Toa tempToa_ChieuVe=null;
                for (Toa j:DSTatCaToa_ChieuVe)
                {
                    if (j.getMaToa().equals(tempMaToa_ChieuVe))
                    {
                        tempToa_ChieuVe=j;
                        break;
                    }
                }
                
                //Tạo vé 1 chiều bằng bảng model2
                int tempMaChuyen_ChieuVe=ketNoiCSDL.addChuyenDi(tempTauChayTuyen_ChieuVe.getMaTuyen(), tempTuyenDiQuaTram_ChieuVe[0].getTenTram(), tempTuyenDiQuaTram_ChieuVe[0].getThoiGianThemTram(), tempTuyenDiQuaTram_ChieuVe[1].getTenTram(),tempTuyenDiQuaTram_ChieuVe[1].getThoiGianThemTram(),tempMaTau_ChieuVe,tempTauChayTuyen_ChieuVe.getThoiGianKhoiHanh(),tempToa_ChieuVe.getMaToa(),tempToa_ChieuVe.getThoiGianThemToa());
                int tempMaVe_ChieuVe=ketNoiCSDL.addVe(taiKhoan.getTenTaiKhoan(), tempChoNgoiSo_ChieuVe, timeStampThoiGianDi_ChieuVe, timeStampThoiGianDen_ChieuVe, 0,false,tempMaChuyen_ChieuVe);
            }
            else
            {
                //Lấy dữ liệu cần thiết từ bảng Chiều đi để Đặt vé
                String tempMaTau=model1.getValueAt(i,0).toString();//Table---|maTau,maToa,i.getText(),thoiGianDi,thoiGianDen|
                String tempMaToa=model1.getValueAt(i, 1).toString();
                int tempChoNgoiSo=Integer.valueOf(model1.getValueAt(i, 2).toString());
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd hh:mm");
                Date tempThoiGianDi=null;
                try {
                    tempThoiGianDi=formatter.parse(model1.getValueAt(i, 3).toString());
                } catch (ParseException ex) {
                    ex.printStackTrace();
                }
                Timestamp timeStampThoiGianDi=new Timestamp(tempThoiGianDi.getTime());
                Date tempThoiGianDen=null;
                try {
                    tempThoiGianDen=formatter.parse(model1.getValueAt(i, 4).toString());
                } catch (ParseException ex) {
                    ex.printStackTrace();
                }
                Timestamp timeStampThoiGianDen=new Timestamp(tempThoiGianDen.getTime());
                //get Tuyến theo Mã Tàu
                TauChayTuyen tempTauChayTuyen=null;
                for (TauChayTuyen j:DSTauPhuHop)
                {
                    if ((j.getMaTau().equals(tempMaTau))&&(j.getThoiGianDenTramDi().compareTo(timeStampThoiGianDi)==0))
                    {
                        tempTauChayTuyen=j;
                        break;
                    }
                }
                //get Trạm đi, Trạm đến theo Mã Tuyến
                TuyenDiQuaTram[] tempTuyenDiQuaTram=null;
                for (TuyenDiQuaTram[] j:DSTuyen)
                {
                    if (j[0].getMaTuyen().equals(tempTauChayTuyen.getMaTuyen()))
                    {
                        tempTuyenDiQuaTram=j;
                        break;
                    }
                }
                Toa tempToa=null;
                for (Toa j:DSTatCaToa)
                {
                    if (j.getMaToa().equals(tempMaToa))
                    {
                        tempToa=j;
                        break;
                    }
                }
                //Tạo vé chiều đi bằng bảng model1
                int tempMaChuyen=ketNoiCSDL.addChuyenDi(tempTauChayTuyen.getMaTuyen(), tempTuyenDiQuaTram[0].getTenTram(), tempTuyenDiQuaTram[0].getThoiGianThemTram(), tempTuyenDiQuaTram[1].getTenTram(),tempTuyenDiQuaTram[1].getThoiGianThemTram(),tempMaTau,tempTauChayTuyen.getThoiGianKhoiHanh(),tempToa.getMaToa(),tempToa.getThoiGianThemToa());
                if (!model2.getValueAt(i, 0).equals(""))
                {
                    int tempMaVe=ketNoiCSDL.addVe(taiKhoan.getTenTaiKhoan(), tempChoNgoiSo, timeStampThoiGianDi, timeStampThoiGianDen, 0, true,tempMaChuyen);
                    //Lấy dữ liệu cần thiết từ bảng Chiều về để Đặt vé
                    String tempMaTau_ChieuVe=model2.getValueAt(i,0).toString();//Table---|maTau,maToa,i.getText(),thoiGianDi,thoiGianDen|
                    String tempMaToa_ChieuVe=model2.getValueAt(i, 1).toString();
                    int tempChoNgoiSo_ChieuVe=Integer.valueOf(model2.getValueAt(i, 2).toString());
                    Date tempThoiGianDi_ChieuVe=null;
                    try {
                        tempThoiGianDi_ChieuVe=formatter.parse(model2.getValueAt(i, 3).toString());
                    } catch (ParseException ex) {
                        ex.printStackTrace();
                    }
                    Timestamp timeStampThoiGianDi_ChieuVe=new Timestamp(tempThoiGianDi_ChieuVe.getTime());
                    Date tempThoiGianDen_ChieuVe=null;
                    try {
                        tempThoiGianDen_ChieuVe=formatter.parse(model2.getValueAt(i, 4).toString());
                    } catch (ParseException ex) {
                        ex.printStackTrace();
                    }
                    Timestamp timeStampThoiGianDen_ChieuVe=new Timestamp(tempThoiGianDen_ChieuVe.getTime());
                    //get Tuyến theo Mã Tàu
                    TauChayTuyen tempTauChayTuyen_ChieuVe=null;
                    for (TauChayTuyen j:DSTauPhuHop_ChieuVe)
                    {
                        if ((j.getMaTau().equals(tempMaTau_ChieuVe))&&(j.getThoiGianDenTramDi().compareTo(timeStampThoiGianDi_ChieuVe)==0))
                        {
                            tempTauChayTuyen_ChieuVe=j;
                            break;
                        }
                    }
                    //get Trạm đi, Trạm đến theo Mã Tuyến
                    TuyenDiQuaTram[] tempTuyenDiQuaTram_ChieuVe=null;
                    for (TuyenDiQuaTram[] j:DSTuyen_ChieuVe)
                    {
                        if (j[0].getMaTuyen().equals(tempTauChayTuyen_ChieuVe.getMaTuyen()))
                        {
                            tempTuyenDiQuaTram_ChieuVe=j;
                            break;
                        }
                    }
                    Toa tempToa_ChieuVe=null;
                    for (Toa j:DSTatCaToa_ChieuVe)
                    {
                        if (j.getMaToa().equals(tempMaToa_ChieuVe))
                        {
                            tempToa_ChieuVe=j;
                            break;
                        }
                    }
                    //Tạo vé chiều về bằng bảng model2
                    int tempMaChuyen_ChieuVe=ketNoiCSDL.addChuyenDi(tempTauChayTuyen_ChieuVe.getMaTuyen(), tempTuyenDiQuaTram_ChieuVe[0].getTenTram(), tempTuyenDiQuaTram_ChieuVe[0].getThoiGianThemTram(), tempTuyenDiQuaTram_ChieuVe[1].getTenTram(),tempTuyenDiQuaTram_ChieuVe[1].getThoiGianThemTram(),tempMaTau_ChieuVe,tempTauChayTuyen_ChieuVe.getThoiGianKhoiHanh(),tempToa_ChieuVe.getMaToa(),tempToa_ChieuVe.getThoiGianThemToa());
                    ketNoiCSDL.addVeKhuHoi(tempMaVe, timeStampThoiGianDi_ChieuVe, timeStampThoiGianDen_ChieuVe, tempChoNgoiSo_ChieuVe, tempMaVe, timeStampThoiGianDi, tempMaChuyen_ChieuVe, 0);
                }
                else//nếu có chiều đi mà không chiều về
                {
                    int tempMaVe=ketNoiCSDL.addVe(taiKhoan.getTenTaiKhoan(), tempChoNgoiSo, timeStampThoiGianDi, timeStampThoiGianDen, 0, false,tempMaChuyen);
                }
            }
        }
    }//GEN-LAST:event_jButtonXacNhanActionPerformed
    private void moveRowBy_ChieuDi(int by)
{
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    int[] rows = jTable1.getSelectedRows();
    int destination = rows[0] + by;
    int rowCount = model.getRowCount();

    if (destination < 0 || destination >= rowCount)
    {
        return;
    }

    model.moveRow(rows[0], rows[rows.length - 1], destination);
    jTable1.setRowSelectionInterval(rows[0] + by, rows[rows.length - 1] + by);
}
    private void moveRowBy_ChieuVe(int by)
{
    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
    int[] rows = jTable2.getSelectedRows();
    int destination = rows[0] + by;
    int rowCount = model.getRowCount();

    if (destination < 0 || destination >= rowCount)
    {
        return;
    }

    model.moveRow(rows[0], rows[rows.length - 1], destination);
    jTable2.setRowSelectionInterval(rows[0] + by, rows[rows.length - 1] + by);
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogTaoCapVeKhuHoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogTaoCapVeKhuHoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogTaoCapVeKhuHoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogTaoCapVeKhuHoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogTaoCapVeKhuHoi dialog = new JDialogTaoCapVeKhuHoi();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButtonDown_ChieuDi;
    private javax.swing.JButton jButtonDown_ChieuVe;
    private javax.swing.JButton jButtonUp_ChieuDi;
    private javax.swing.JButton jButtonUp_ChieuVe;
    private javax.swing.JButton jButtonXacNhan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
